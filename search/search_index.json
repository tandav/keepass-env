{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>docs</p>"},{"location":"#keepass-env","title":"keepass-env","text":"<p>Read key-value pairs from <code>.kdbx</code> file and set them as environment variables or return as dict. <code>.kdbx</code> entries can store key-value attributes. This tool takes a path to entry and loads it's attributes.</p>"},{"location":"#install","title":"install","text":"<pre><code>pip install keepass-env\n</code></pre>"},{"location":"#usage","title":"usage","text":"<pre><code>import keepass_env\n\ndb_filename = 'my_database.kdbx'\npassword = 'secure-af'\nentry_path = ['group0', 'subgroup1', 'my_entry']\n\n# load to os.environ\nkeepass_env.load_env(db_filename, entry_path, password=password)\n\n# return as dict\nkeepass_env.env_values(db_filename, entry_path, password=password)\n{'KEY_0': 'value-0', 'KEY_1': 'value-1'}\n\n# write env\nkeepass_env.write_env(db_filename, entry_path, password=password, env={\n    'MY_KEY_0': 'my-value-0',\n    'MY_KEY_1': 'my-value-1',\n})\n</code></pre>"},{"location":"#entry-references","title":"entry references","text":"<p>This tool supports entry references. For example some entry have following key-value attributes:</p> <pre><code>KEY_0 value-0\nKEY_1 ref@group5/entry42:API_TOKEN\n</code></pre> <p>Value for <code>KEY_1</code> will be loaded from another entry with path <code>['group5', 'entry42']</code> and will be taken from its attribute <code>API_TOKEN</code>.</p> <ul> <li>Format of references is prefix <code>ref@</code>, path separator <code>/</code> attribute separator <code>:</code>.</li> <li>Multiple references are supported. (If referenced value is also reference and so on, it will be looked up recursively)</li> <li>You can also reference to title, username, password, url of an entry with using following format:<ul> <li><code>ref@group5/entry42:__title__</code></li> <li><code>ref@group5/entry42:__username__</code></li> <li><code>ref@group5/entry42:__password__</code></li> <li><code>ref@group5/entry42:__url__</code></li> </ul> </li> <li>username, password, url can also be a refernces. title can't be a reference</li> </ul>"},{"location":"#print-to-stdout","title":"print to stdout","text":"<p>This package comes with console script <code>keepass-env</code> (It will be available after pip installation).</p> <pre><code>keepass-env --db mydb.kdbx --password secure-af --entry-path group0/subgroup1/my_entry\nKEY_0=value-0\nKEY_1=value-1\n\n# to print in shell format, use --format shell\nkeepass-env --db mydb.kdbx --password secure-af --entry-path group0/subgroup1/my_entry --format shell\nexport KEY_0=value-0\nexport KEY_1=value-1\n\n# --format docker\nkeepass-env --db mydb.kdbx --password secure-af --entry-path group0/subgroup1/my_entry --format docker\n-e KEY_0=value-0 -e KEY_1=value-1\n\n# configuration via env variables are also available:\nKEEPASS_DB=mydb.kdbx KEEPASS_PASSWORD=secure-af KEEPASS_ENTRY_PATH=group0/subgroup1/my_entry KEEPASS_FORMAT=shell\nexport KEY_0=value-0\nexport KEY_1=value-1\n</code></pre> <p>If you do not specify <code>--password</code> argument or <code>KEEPASS_PASSWORD</code> variable, you will be asked to enter a password in the command line.</p> <p>Printing variables can be used to load them before running some command in the shell:</p> <pre><code>eval \"$(keepass-env --db my.kdbx --password 1234 --entry-path main/project-x)\" python main.py\n</code></pre> <p>Or you can put in Makefile like this: <pre><code>.PHONY: run\nrun:\n    eval \"$$(keepass-env --db my.kdbx --password 1234 --entry-path main/project-x)\" python main.py\n\n# another example:\n\n.PHONY: run_fastapi_app\nrun_fastapi_app:\n    eval \"$$(keepass-env --db my.kdbx --password 1234 --format shell --entry-path main/project-x)\"; \\\n    uvicorn server:app\n</code></pre></p>"}]}